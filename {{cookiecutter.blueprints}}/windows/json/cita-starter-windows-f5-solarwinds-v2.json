{"status":{},"contains_secrets":false,"product_version":"3.2.2","spec":{"description":"Windows 2019 Blueprint that requests IPv4 from the user, joins domain, has performance optimization and ejects CDROM. Runs Windows Update and initializes data disk. Sends out an email notification on successful creation of VM.","resources":{"client_attrs":{"None":{"Profile":{"vSphere":{"Action":{},"dsl_name":"vSphere"},"AHV":{"Action":{},"dsl_name":"AHV"}},"Package":{"AHV_Package":{"Action":{},"dsl_name":"AHV_Package"},"vSphere_Package":{"Action":{},"dsl_name":"vSphere_Package"}},"Substrate":{"AHVVM":{"Action":{},"AhvVm":{"@@{vm_name}@@":{"dsl_name":"vm_name"}},"dsl_name":"AHVVM"},"vSphereVM":{"Action":{},"dsl_name":"vSphereVM"}},"Service":{"Windows":{"Action":{},"dsl_name":"Windows"}},"Deployment":{"6ca90e2b_deployment":{"Action":{},"dsl_name":"_6ca90e2b_deployment"},"04e86344_deployment":{"Action":{},"dsl_name":"_04e86344_deployment"}}}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"JoinDomain"},{"kind":"app_task","name":"Restart"},{"kind":"app_task","name":"Wait30"},{"kind":"app_task","name":"InitDataDisk"},{"kind":"app_task","name":"PerfOpt"},{"kind":"app_task","name":"EjectCdrom"},{"kind":"app_task","name":"DisableAutoLogon"},{"kind":"app_task","name":"InstallDscModules"},{"kind":"app_task","name":"UpdateWindows"},{"kind":"app_task","name":"SendMail"}],"name":"Windows___create___dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"JoinDomain"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Restart"}},{"from_task_reference":{"kind":"app_task","name":"Restart"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait30"}},{"from_task_reference":{"kind":"app_task","name":"Wait30"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"PerfOpt"}},{"from_task_reference":{"kind":"app_task","name":"Wait30"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"InitDataDisk"}},{"from_task_reference":{"kind":"app_task","name":"PerfOpt"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"EjectCdrom"}},{"from_task_reference":{"kind":"app_task","name":"InitDataDisk"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"EjectCdrom"}},{"from_task_reference":{"kind":"app_task","name":"EjectCdrom"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"DisableAutoLogon"}},{"from_task_reference":{"kind":"app_task","name":"DisableAutoLogon"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"InstallDscModules"}},{"from_task_reference":{"kind":"app_task","name":"InstallDscModules"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"UpdateWindows"}},{"from_task_reference":{"kind":"app_task","name":"UpdateWindows"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SendMail"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"JoinDomain","attrs":{"exit_status":[],"script":"# region headers\n# posh-api-template v20190604 \/ stephane.bourdeaud@nutanix.com\n#* author:       stephane.bourdeaud@nutanix.com\n#* version:      11\/14\/2019\n#  task_name:    JoinDomain\n#  description:  Joins the specified Active Directory domain\n# endregion\n\n#region capture Calm variables\n$ad_username = \"@@{active_directory.username}@@\"\n$ad_username_secret = \"@@{active_directory.secret}@@\"\n$ad_domain = \"@@{domain}@@\"\n#endregion\n\n#converting password to something we can use\n$adminpassword = ConvertTo-SecureString -asPlainText -Force -String \"$ad_username_secret\"\n#creating the credentials object based on the Calm variables\n$credential = New-Object System.Management.Automation.PSCredential($ad_username,$adminpassword)\n#joining the domain\nwrite-host \"$(get-date) [INFO] Joining Active Directory domain $($ad_domain)\" -ForegroundColor Green\ntry {$result = add-computer -domainname $ad_domain -Credential ($credential) -Force -Options JoinWithNewName,AccountCreate -PassThru -ErrorAction Stop -Verbose}\ncatch {throw \"Could not join Active Directory domain : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Successfully joined Active Directory domain $($ad_domain)\" -ForegroundColor Green","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Restart","attrs":{"type":"","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"Windows___restart___runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Wait30","attrs":{"type":"","interval_secs":30},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"InitDataDisk","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    InitDataDisk\n# description:  turns disk 1 into a GPT ntfs partition nad mounts it with the next\n#               available logical drive letter.               \n# output vars:  none\n# dependencies: none\n# endregion\n\nwrite-host \"$(get-date) [INFO] Bringing data disk online\" -ForegroundColor Green\ntry {Get-Disk | Where-Object IsOffline \u2013Eq $True | Set-Disk \u2013IsOffline $False}\ncatch {throw \"$(get-date) [ERROR] Error bringing data disk online: $($_.Exception.Message)\"}\n\nwrite-host \"$(get-date) [INFO] Initializing data disk\" -ForegroundColor Green\ntry {Initialize-Disk -Number 1 -PartitionStyle GPT}\ncatch {throw \"$(get-date) [ERROR] Error initializing data disk : $($_.Exception.Message)\"}\n\nwrite-host \"$(get-date) [INFO] Creating new partition on data disk\" -ForegroundColor Green\ntry {New-Partition -DiskNumber 1 -UseMaximumSize -AssignDriveLetter}\ncatch {throw \"$(get-date) [ERROR] Error creating new partition on data disk : $($_.Exception.Message)\"}\n\nwrite-host \"$(get-date) [INFO] Formatting data disk\" -ForegroundColor Green\ntry {Format-Volume -DriveLetter ((Get-Partition -DiskNumber 1 -PartitionNumber 2).DriveLetter)}\ncatch {throw \"$(get-date) [ERROR] Error formatting data disk : $($_.Exception.Message)\"}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"PerfOpt","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    PerfOpt\n# description:  optimizes windows to run as a vm.               \n# output vars:  none\n# dependencies: none\n# endregion\n\n# Tested on Windows Server 2019\n#change UI settings to max performance (for the administrator user)\n#Write-Host \"INFO: Changing UI settings to max performance\"\n#New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\" -Name VisualFXSetting -Value 2\n#disable background image\n#Write-Host \"INFO: Disabling background image\"\n#New-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableLogonBackgroundImage -Value 1\n#disable paging executive\nWrite-Host \"$(get-date) [INFO] Disabling paging executive\"\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Session Manager\\Memory Management\" -Name DisablePagingExecutive -Value 1\n#enable Ultimate Performance Power Plan\nif (!(powercfg -l | %{if($_.contains(\"Ultimate Performance\")) {$_.split()[3]}})) {\n    Write-Host \"$(get-date) [INFO] Adding Ultimate Performance power plan\"\n    powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61\n}\n#set power plan to Ultimate Performance\n$ultimate = powercfg -l | %{if($_.contains(\"Ultimate Performance\")) {$_.split()[3]}} | Select -First 1\ntry {\n    powercfg -setactive $ultimate\n    Write-Host \"$(get-date) [INFO] Set power plan to Ultimate Performance\"\n}\ncatch {\n    Throw \"$(get-date) [ERROR] Could not set power plan to Ultimate Performance : $($_.Exception.Message)\"\n}\n#disable scheduled tasks\nWrite-Host \"$(get-date) [INFO] Disabling scheduled tasks\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Autochk\\Proxy\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Bluetooth\\UninstallDeviceTask\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Defrag\\ScheduledDefrag\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Diagnosis\\Scheduled\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\DiskDiagnostic\\Microsoft-Windows-DiskDiagnosticDataCollector\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\DiskDiagnostic\\Microsoft-Windows-DiskDiagnosticResolver\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Location\\Notifications\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Maintenance\\WinSAT\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Maps\\MapsToastTask\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Maps\\MapsUpdateTask\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\MemoryDiagnostic\\ProcessMemoryDiagnosticEvents\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\MemoryDiagnostic\\RunFullMemoryDiagnostic\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Mobile Broadband Accounts\\MNO Metadata Parser\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeSystem\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Ras\\MobilityManager\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\RecoveryEnvironment\\VerifyWinRE\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Registry\\RegIdleBackup\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\UPnP\\UPnPHostConfig\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\WDI\\ResolutionHost\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Customer Experience Improvement Program\\consolidator\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Customer Experience Improvement Program\\usbceip\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\DiskCleanup\\SilentCleanup\"\nDisable-ScheduledTask -TaskName \"\\Microsoft\\Windows\\Servicing\\StartComponentCleanup\"","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"EjectCdrom","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    EjectCdrom\n# description:  ejects the cdrom (applicable when using unattend.xml to mask configuration).               \n# output vars:  none\n# dependencies: none\n# endregion\n\n$sh = New-Object -ComObject \"Shell.Application\"\nwrite-host \"$(get-date) [INFO] Ejecting cdrom\" -ForegroundColor Green\ntry {$sh.Namespace(17).Items() | Where-Object { $_.Type -eq \"CD Drive\" } | foreach { $_.InvokeVerb(\"Eject\") }}\ncatch {throw \"$(get-date) [ERROR] Error ejecting cdrom : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Successfully ejected cdrom\" -ForegroundColor Green","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DisableAutoLogon","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    DisableAutoLogon\n# description:  disables autologon in case it was enabled in the vm template image.               \n# output vars:  none\n# dependencies: none\n# endregion\nwrite-host \"$(get-date) [INFO] Disabling autologon\" -ForegroundColor Green\ntry {Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon' -Name 'AutoAdminLogon' -Value 0 -ErrorAction Stop}\ncatch {throw \"$(get-date) [ERROR] Error disabliong autologon : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Successfully disabled autologon\" -ForegroundColor Green","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"InstallDscModules","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    ApplyLinuxUpdates\n# description:  installs DSC modules from the PowerShell Gallery.               \n# output vars:  none\n# dependencies: requires internet connectivity to the PowerShell Gallery.\n# endregion\n\n#installing NuGet package provider\nwrite-host \"$(get-date) [INFO] Installing NuGet package provider...\" -ForegroundColor Green\ntry {Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force}\ncatch {throw \"$(get-date) [ERROR] Error installing NuGet package provider : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Successfully installed NuGet package provider\" -ForegroundColor Green\n\n#trust the Windows PowerShell Gallery repository\nwrite-host \"$(get-date) [INFO] Trusting PowerShell Gallery repository...\" -ForegroundColor Green\ntry {Set-PSRepository -Name \"PSGallery\" -InstallationPolicy Trusted -ErrorAction Stop}\ncatch {throw \"$(get-date) [ERROR] Error trusting the PowerShell Gallery repository : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Now trusting PowerShell Gallery repository\" -ForegroundColor Green\n$Error.Clear() #required as PoSH populates $error even though the cmdlet completed successfully\n\n#install Windows Update Desired State Configuration PowerShell Module\nwrite-host \"$(get-date) [INFO] Installing the xWindowsUpdate module...\" -ForegroundColor Green\ntry {Install-Module -Name xWindowsUpdate -ErrorAction Stop}\ncatch {throw \"$(get-date) [ERROR] Error installing the xWindowsUpdate module : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Successfully installed the xWindowsUpdate module\" -ForegroundColor Green","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"UpdateWindows","attrs":{"type":"","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"Windows_Update_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"SendMail","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    2020\/10\/16, v1\n# task_name:    SendEmail\n# description:  Sends an email notification with VM details.\n# input:        requester_email, email_sender, smtp_server, vm_requester_name, vm_name\n# output:       n\/a\n# endregion\n\n#region capture Calm variables\n$email_to = \"@@{requester_email}@@\"\n$email_from = \"@@{email_sender}@@\" \n$smtp_server = \"@@{smtp_server}@@\" \n$requester = \"@@{vm_requester_name}@@\"\n$vm_name = \"@@{vm_name}@@\"\n$vm_ip = \"@@{address}@@\"\n#endregion\n\n#region creating email body\n$html_var1 = \"<html><body><p>Hello $($requestor),<\/p><p>You had requested a Windows VM, we have successfully deployed your VM and you can start using it using the following information:<\/p>\"\n$html_var2 = \"<br>Service type: Windows instance<\/br>\n<br>VM name: $($vm_name)<\/br>\n<br>VM IP address: $($vm_ip)<\/br>\n<br>Login: @@{windows.username}@@<\/br>\n<br>Password: @@{windows.secret}@@<\/br>\n\"\n$html_var3 = \"<p>For security reasons, please do not share your password with anyone.<br>Regards,<br><p>The Cloud Team<\/p><\/body><\/html>\"\n$email_body = $html_var1 + $html_var2 + $html_var3\n#endregion\n\n#region sending email\n$email_subject = \"Your VM  $($vm_name) is ready!\"\n\ntry {\n    Write-Output (\"$(get-date) [INFO] Sending email notification...\")\n    Send-MailMessage -From $email_from -To $email_to -Subject $email_subject -BodyAsHtml $email_body -SmtpServer $smtp_server\n    Write-Output (\"$(get-date) [SUCCESS] Sending email notification --> Complete\")\n} catch {\n    Write-Output (\"$(get-date) [ERROR] Sending email notification --> Error\")\n    Write-Warning ('Failed to send email: \"{0}\"', $_.Exception.Message)\n}\n#endregion","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"Windows___create___runbook","main_task_local_reference":{"kind":"app_task","name":"Windows___create___dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for starting an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Windows___start___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Windows___start___runbook","main_task_local_reference":{"kind":"app_task","name":"Windows___start___dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Windows___stop___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Windows___stop___runbook","main_task_local_reference":{"kind":"app_task","name":"Windows___stop___dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"DomainUnjoin"}],"name":"Windows___delete___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DomainUnjoin","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    DomainUnjoin\n# description:  tries to unjoin Active Directory domain. Does not return an error if it fails.\n#               this is to prevent calm app delete task from failing at this step.\n# output vars:  none\n# dependencies: none\n# endregion\n\n#converting password to something we can use\n$adminpassword = ConvertTo-SecureString -asPlainText -Force -String \"@@{active_directory.secret}@@\"\n#creating the credentials object based on the Calm variables\n$credential = New-Object System.Management.Automation.PSCredential(\"@@{active_directory.username}@@\",$adminpassword)\n#unjoining the domain\nwrite-host \"$(get-date) [INFO] Unjoining Active Directory domain\" -ForegroundColor Green\ntry \n{\n    $result = remove-computer -UnjoinDomainCredential ($credential) -Force -PassThru -ErrorAction Stop -Verbose\n}\ncatch \n{\n    write-host \"$(get-date) [ERROR] Could not unjoin Active Directory domain : $($_.Exception.Message)\"\n    $Error.Clear()\n}\nwrite-host \"$(get-date) [SUCCESS] Successfully unjoined Active Directory domain\" -ForegroundColor Green","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"Windows___delete___runbook","main_task_local_reference":{"kind":"app_task","name":"Windows___delete___dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for restarting an application","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Restart"}],"name":"Windows___restart___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Restart","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    Restart\n# description:  runs computer restart as a job (so Calm does not error out).               \n# output vars:  none\n# dependencies: none\n# endregion\nStart-Job -ScriptBlock {Restart-Computer -Force}\nexit 0","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"Windows___restart___runbook","main_task_local_reference":{"kind":"app_task","name":"Windows___restart___dag"},"variable_list":[]},"name":"action_restart"},{"description":"System action for deleting an application. Does not delete created VMs","type":"system","critical":true,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Windows___soft_delete___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Windows___soft_delete___runbook","main_task_local_reference":{"kind":"app_task","name":"Windows___soft_delete___dag"},"variable_list":[]},"name":"action_soft_delete"},{"description":"System action for applying Windows updates","type":"user","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"ApplyWindowsUpdates"},{"kind":"app_task","name":"Restart"},{"kind":"app_task","name":"Wait30"}],"name":"Windows_Update_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"ApplyWindowsUpdates"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Restart"}},{"from_task_reference":{"kind":"app_task","name":"Restart"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait30"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ApplyWindowsUpdates","attrs":{"exit_status":[],"script":"# region headers\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    v1.0\/20210504 - cita-starter version\n# task_name:    ApplyWindowsUpdates\n# description:  applies all applicable Windows Updates (from WindowsUpdate) using DSC (Desired Configuration State).               \n# output vars:  none\n# dependencies: requires InstallDscModules\n# endregion\n\n#configure desired state\nConfiguration xWindowsUpdateAgent-InstallNow\n{\n    Import-DscResource -ModuleName 'xWindowsUpdate'\n\n    xWindowsUpdateAgent 'InstallSecurityAndImportant'\n    {\n        IsSingleInstance = 'Yes'\n        UpdateNow        = $true\n        Category         = @('Security','Important') #{ Security | Important | Optional }\n        Source           = 'WindowsUpdate' #{ MicrosoftUpdate | WindowsUpdate | WSUS }\n        Notifications    = 'Disabled' #{ Disabled | ScheduledInstallation }\n    }\n}\n\n#build configuration mof file\nwrite-host \"$(get-date) [INFO] Building desired state configuration file for Windows Update\" -ForegroundColor Green\nxWindowsUpdateAgent-InstallNow\n\n#apply desired state\nwrite-host \"$(get-date) [INFO] Apply Windows Update desired state configuration and install updates now\" -ForegroundColor Green\ntry {Start-DscConfiguration -Path .\\xWindowsUpdateAgent-InstallNow -Wait -Force -ErrorAction Stop -Verbose}\ncatch {throw \"$(get-date) [ERROR] Error applying desired state configuration : $($_.Exception.Message)\"}\nwrite-host \"$(get-date) [SUCCESS] Successfully applied desired state configuration. Please reboot the computer.\" -ForegroundColor Green","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Restart","attrs":{"type":"","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"Windows___restart___runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Wait30","attrs":{"type":"","interval_secs":30},"timeout_secs":"0","type":"DELAY","variable_list":[]}],"description":"","name":"Windows_Update_runbook","main_task_local_reference":{"kind":"app_task","name":"Windows_Update_dag"},"variable_list":[]},"name":"Update"}],"depends_on_list":[],"name":"Windows","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"AHVVM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"SolarWindsGetIp"}],"name":"AHVVM___pre_create___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"AHVVM"},"retries":"0","description":"","exec_target_reference":{"kind":"app_endpoint","name":"solarwinds"},"child_tasks_local_reference_list":[],"name":"SolarWindsGetIp","attrs":{"exit_status":[],"script":" #requires -version 4 -Module SwisPowerShell\n \n<#\n    .SYNOPSIS\n        Code sample for Solarwinds IPAM\n    .DESCRIPTION\n        requires solarwinds module - https:\/\/www.powershellgallery.com\/packages\/SwisPowerShell\n        the solarwinds rest api is not well documented, so the best solution\n        is to use the powershell commandlets and execute them from the\n        IPAM server.\n\n        Note - An active directory account can not be used with the solarwinds API\n        It must be a solarwinds 'sql' account.\n\n        All of the def_net* macros must be defined in the blueprint, in the script variables, and in\n        the script's switch block.\n\n        In Calm, this task should be executed against a Windows Endpoint (possibly the SWIS host)\n\n    .NOTES\n        Version:        1.0.1\n        Author:         Dusty Lane\n        Creation Date:  03\/25\/2021\n        Purpose\/Change: add some error handling and change logic.\n\n  \n#>\n\n\n$ErrorActionPreference = \"Stop\"\n \n$network = \"@@{network}@@\"\n$swhost = \"@@{solarwinds_ip}@@\"\n$swuser = \"@@{solarwinds.username}@@\"\n$swpasswd = \"@@{solarwinds.secret}@@\"\n$reservetime = \"240\" # in minutes\n\n# to minimize the amount of user input, we need to define\n# the network, mask, and gateway variables.\n# We will need to define this for every network that we want to be able to provision \n# virtual machines to.  Add to the switch loop.\n\n$def_net1 = \"@@{def_net1}@@\"\n$def_net1_mask = \"@@{def_net1_mask}@@\"\n$def_net1_gw = \"@@{def_net1_gw}@@\"\n$def_net2 = \"@@{def_net2}@@\"\n$def_net2_mask = \"@@{def_net2_mask}@@\"\n$def_net2_gw = \"@@{def_net2_gw}@@\"\n\n#------------------ no changes below here -----------#\n\n#region Functions\n\nFunction Convert-IPInt64 { \n \n    [CmdletBinding()]\n    Param(\n      [parameter(Mandatory=$true)]\n      [string]$IP\n      )\n \n    $IPSPLIT = $IP.Split('.') # IP to it's octets \n \n    # Return \n    [int64]([int64]$IPSPLIT[0] * 16777216 + \n            [int64]$IPSPLIT[1] * 65536 + \n            [int64]$IPSPLIT[2] * 256 + \n            [int64]$IPSPLIT[3]) \n} \n \nFunction Convert-SMtoCIDR\n{ \n\n   [CmdletBinding()]\n    Param(\n      [parameter(Mandatory=$true)]\n      [string]$SUBNET_MASK\n      )\n \n    [int64]$SMINT64 = Convert-IPInt64 -IP $SUBNET_MASK \n \n    $Cidr32Int = 2147483648 \n \n    $MaskCidr = 0 \n    for ($i = 0; $i -lt 32; $i++) \n    { \n        if (!($SMINT64 -band $Cidr32Int) -eq $Cidr32Int) { break } # Bitwise and operator - Same as \"&\" in C# \n \n        $MaskCidr++ \n        $Cidr32Int = $Cidr32Int -shr 1 \n    } \n \n    # Return \n    $MaskCidr \n}\n#endregion\n\n# using the switch block to create a powershell object to hold the values.\nswitch ($network)\n{\n    $def_net1\n    {\n        $mask = $def_net1_mask\n        $gateway = $def_net1_gw\n    }\n    $def_net2\n    {\n        $mask = $def_net2_mask\n        $gateway = $def_net2_gw\n    }\n}\n\nWrite-Host \"Network is: $network\"\nWrite-Host \"Subnet mask is: $($mask)\"\nWrite-Host \"Default gateway is: $($gateway)\"\n# create connection to the solarwinds ipam server\n$swis = Connect-Swis -Hostname $swhost -UserName $swuser -Password $swpasswd\n\n# using the subnet mask to generate the cidr.  cidr Code contributed by Matthew.Foster@nutanix.com\n$cidr = Convert-SMtoCIDR -SUBNET_MASK $mask\n\n# DNS & Ping Test to double check the reservation.  This may or maynot be needed depending on\n# how well the customer is leveraging their IPAM solution.\n$Test = $true\nwhile ($test -eq $true)\n{\n    # do some checks (ping and nslookup) to make sure that the IPs are truly available\n    # get an IP from the IPAM\n    $ip_address = Invoke-SwisVerb $swis IPAM.SubnetManagement StartIpReservation @(\"$network\", \"$cidr\", \"$reservetime\") -Verbose | \n      Select-Object -expand '#text'\n    \n      # test-netconnection is really just a ping to the IP we received from the IPAM.\n    $Test = Test-NetConnection -InformationLevel Quiet $ip_address -ErrorAction Continue\n    \n    # if the ping 'fails', the ip is not in use.  next step we need to check dns...\n    if ($test -eq $false)\n    {\n        try\n        {\n            # now let's check DNS with resolve-dns.  if this command errors, drop to catch block.\n            # if it resolves successfully, let's reset the $test variable back to true \n            # and try again.\n            Resolve-DnsName -Name $ip_address\n            $Test = $true\n        }\n        catch\n        {\n            $test = $false\n            # we need to clear the error from the resolve-dnsname command so that calm\n            # will not fail due to the error.\n            $error.Clear()\n        }\n    }\n}\n\ntry\n{\n    # we are putting this in a try catch - just because....  The current version of the API does not appear to throw error messages.\n    $capture_ipam1 = Invoke-SwisVerb -SwisConnection $swis -EntityName IPAM.SubnetManagement -Verb ChangeIpStatus @($ip_address, \"Blocked\") -Verbose\n    $capture_ipam2 = Invoke-SwisVerb -SwisConnection $swis -EntityName IPAM.SubnetManagement -Verb FinishIpReservation @($ip_address, \"Reserved\") -Verbose     \n}\ncatch\n{\n    #displaying error\n    $_ \n}\n\nWrite-Host \"vm_ip=$ip_address\"\nWrite-Host \"subnet_mask=$mask\"\nWrite-Host \"gateway=$gateway\"\nWrite-Host \"subnet_mask_bits=$cidr\"","eval_variables":["vm_ip","subnet_mask","subnet_mask_bits","gateway","cidr"],"eval_scope":"local","type":"","script_type":"npsscript"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"AHVVM___pre_create___runbook","main_task_local_reference":{"kind":"app_task","name":"AHVVM___pre_create___dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"AHVVM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"SolarWindsRemoveIp"}],"name":"AHVVM___post_delete___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"AHVVM"},"retries":"0","description":"","exec_target_reference":{"kind":"app_endpoint","name":"solarwinds"},"child_tasks_local_reference_list":[],"name":"SolarWindsRemoveIp","attrs":{"script":" #requires -version 4 -Module SwisPowerShell\n \n<#\n    .SYNOPSIS\n        Code sample for Solarwinds IPAM to remove reservation\n    .DESCRIPTION\n        requires solarwinds module - https:\/\/www.powershellgallery.com\/packages\/SwisPowerShell\n        the solarwinds rest api is not well documented, so the best solution\n        is to use the powershell commandlets and execute them from the\n        IPAM server.\n\n        Note - An active directory account can not be used with the solarwinds API\n        It must be a solarwinds 'sql' account.\n\n        In Calm, this task should be executed against a Windows Endpoint (possibly the SWIS host)\n\n    .NOTES\n        Version:        1.0\n        Author:         Dusty Lane\n        Creation Date:  05\/10\/2021\n        Purpose\/Change: \n  \n#>\n\n$ip_address = \"@@{vm_ip}@@\"\n$swhost = \"@@{solarwinds_ip}@@\"\n$swuser = \"@@{solarwinds.username}@@\"\n$swpasswd = \"@@{solarwinds.secret}@@\"\n\n#------------------ no changes below here -----------#\ntry \n{\n    $swis = Connect-Swis -Hostname $swhost -username $swuser -Password $swpasswd\n    invoke-swisverb $swis IPAM.SubnetManagement ChangeIpStatus @($ip_address, \"Available\")\n}\ncatch \n{\n    #displaying error\n    $_\n}\n","type":"","command_line_args":"","exit_status":[],"script_type":"npsscript"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"AHVVM___post_delete___runbook","main_task_local_reference":{"kind":"app_task","name":"AHVVM___post_delete___dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"AHVVM","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"300","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"editables":{"create_spec":{"resources":{"nic_list":{"0":{"subnet_reference":true}},"serial_port_list":{},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"boot_config":true,"disk_list":{"2":{"disk_size_mib":true}}}}},"os_type":"Windows","create_spec":{"name":"@@{vm_name}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"VLAN568","uuid":"d26a8da7-adfd-4870-b64d-d377f27ecbd2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":1,"gpu_list":[],"memory_size_mib":2048,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n   <settings pass=\"specialize\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <ComputerName>@@{vm_name}@@<\/ComputerName>\n         <RegisteredOrganization>@@{org}@@<\/RegisteredOrganization>\n         <RegisteredOwner>@@{org}@@<\/RegisteredOwner>\n         <TimeZone>@@{timezone}@@<\/TimeZone>\n         <ProductKey>@@{product_key}@@<\/ProductKey>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-TCPIP\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <Interfaces>\n            <Interface wcm:action=\"add\">\n               <Identifier>Ethernet<\/Identifier>\n               <Ipv4Settings>\n                  <DhcpEnabled>false<\/DhcpEnabled>\n                  <RouterDiscoveryEnabled>true<\/RouterDiscoveryEnabled>\n                  <Metric>30<\/Metric>\n               <\/Ipv4Settings>\n               <UnicastIpAddresses>\n                  <IpAddress wcm:action=\"add\" wcm:keyValue=\"1\">@@{vm_ip}@@\/@@{subnet_mask_bits}@@<\/IpAddress>\n               <\/UnicastIpAddresses>\n               <Routes>\n                  <Route wcm:action=\"add\">\n                     <Identifier>10<\/Identifier>\n                     <Metric>20<\/Metric>\n                     <NextHopAddress>@@{gateway}@@<\/NextHopAddress>\n                     <Prefix>0.0.0.0\/0<\/Prefix>\n                  <\/Route>\n               <\/Routes>\n            <\/Interface>\n         <\/Interfaces>\n        <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <fDenyTSConnections>false<\/fDenyTSConnections>\n      <\/component>\n      <component xmlns=\"\" name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <UserAuthentication>0<\/UserAuthentication>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <FirewallGroups>\n            <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n               <Active>true<\/Active>\n               <Profile>all<\/Profile>\n               <Group>@FirewallAPI.dll,-28752<\/Group>\n            <\/FirewallGroup>\n         <\/FirewallGroups>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-DNS-Client\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <UseDomainNameDevolution>true<\/UseDomainNameDevolution>\n         <DNSDomain>@@{domain}@@<\/DNSDomain>\n         <Interfaces>\n            <Interface wcm:action=\"add\">\n               <Identifier>Ethernet<\/Identifier>\n               <DNSDomain>@@{domain}@@<\/DNSDomain>\n               <DNSServerSearchOrder>\n                  <IpAddress wcm:action=\"add\" wcm:keyValue=\"1\">@@{dns1}@@<\/IpAddress>\n                  <IpAddress wcm:action=\"add\" wcm:keyValue=\"2\">@@{dns2}@@<\/IpAddress>\n               <\/DNSServerSearchOrder>\n               <EnableAdapterDomainNameRegistration>true<\/EnableAdapterDomainNameRegistration>\n               <DisableDynamicUpdate>true<\/DisableDynamicUpdate>\n            <\/Interface>\n         <\/Interfaces>\n        <\/component>\n   <\/settings>\n   <settings pass=\"oobeSystem\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <UserAccounts>\n            <AdministratorPassword>\n               <Value>@@{windows.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/AdministratorPassword>\n         <\/UserAccounts>\n         <AutoLogon>\n            <Password>\n               <Value>@@{windows.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/Password>\n            <Enabled>true<\/Enabled>\n            <Username>Administrator<\/Username>\n         <\/AutoLogon>\n         <FirstLogonCommands>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>cmd.exe \/c netsh firewall add portopening TCP 5985 \"Port 5985\"<\/CommandLine>\n               <Description>Win RM port open<\/Description>\n               <Order>1<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Enable-PSRemoting -SkipNetworkProfileCheck -Force\"<\/CommandLine>\n               <Description>Enable PS-Remoting<\/Description>\n               <Order>2<\/Order>\n               <RequiresUserInput>true<\/RequiresUserInput>\n            <\/SynchronousCommand>\n            <SynchronousCommand wcm:action=\"add\">\n               <CommandLine>powershell -Command \"Set-ExecutionPolicy -ExecutionPolicy RemoteSigned\"<\/CommandLine>\n               <Description>Enable Remote-Signing<\/Description>\n               <Order>3<\/Order>\n               <RequiresUserInput>false<\/RequiresUserInput>\n            <\/SynchronousCommand>\n         <\/FirstLogonCommands>\n         <OOBE>\n            <HideEULAPage>true<\/HideEULAPage>\n            <SkipMachineOOBE>true<\/SkipMachineOOBE>\n         <\/OOBE>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <InputLocale>@@{locale}@@<\/InputLocale>\n         <SystemLocale>@@{locale}@@<\/SystemLocale>\n         <UILanguageFallback>@@{locale}@@<\/UILanguageFallback>\n         <UILanguage>@@{locale}@@<\/UILanguage>\n         <UserLocale>@@{locale}@@<\/UserLocale>\n      <\/component>\n   <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"e2f4085b-937a-4741-8ae1-859ec0fbee89","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"pracdev-cita-calm-ms-windows-2019","uuid":"f013874a-18a0-4ee5-9633-b63e19f7f5b0"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}},{"data_source_reference":null,"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"IDE"},"device_type":"CDROM"}},{"data_source_reference":null,"type":"","disk_size_mib":51200,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":1,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"vSphereVM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"SolarWindsGetIp"}],"name":"vSphereVM___pre_create___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"vSphereVM"},"retries":"0","description":"","exec_target_reference":{"kind":"app_endpoint","name":"solarwinds"},"child_tasks_local_reference_list":[],"name":"SolarWindsGetIp","attrs":{"exit_status":[],"script":" #requires -version 4 -Module SwisPowerShell\n \n<#\n    .SYNOPSIS\n        Code sample for Solarwinds IPAM\n    .DESCRIPTION\n        requires solarwinds module - https:\/\/www.powershellgallery.com\/packages\/SwisPowerShell\n        the solarwinds rest api is not well documented, so the best solution\n        is to use the powershell commandlets and execute them from the\n        IPAM server.\n\n        Note - An active directory account can not be used with the solarwinds API\n        It must be a solarwinds 'sql' account.\n\n        All of the def_net* macros must be defined in the blueprint, in the script variables, and in\n        the script's switch block.\n\n        In Calm, this task should be executed against a Windows Endpoint (possibly the SWIS host)\n\n    .NOTES\n        Version:        1.0.1\n        Author:         Dusty Lane\n        Creation Date:  03\/25\/2021\n        Purpose\/Change: add some error handling and change logic.\n\n  \n#>\n\n\n$ErrorActionPreference = \"Stop\"\n \n$network = \"@@{network}@@\"\n$swhost = \"@@{solarwinds_ip}@@\"\n$swuser = \"@@{solarwinds.username}@@\"\n$swpasswd = \"@@{solarwinds.secret}@@\"\n$reservetime = \"240\" # in minutes\n\n# to minimize the amount of user input, we need to define\n# the network, mask, and gateway variables.\n# We will need to define this for every network that we want to be able to provision \n# virtual machines to.  Add to the switch loop.\n\n$def_net1 = \"@@{def_net1}@@\"\n$def_net1_mask = \"@@{def_net1_mask}@@\"\n$def_net1_gw = \"@@{def_net1_gw}@@\"\n$def_net2 = \"@@{def_net2}@@\"\n$def_net2_mask = \"@@{def_net2_mask}@@\"\n$def_net2_gw = \"@@{def_net2_gw}@@\"\n\n#------------------ no changes below here -----------#\n\n#region Functions\n\nFunction Convert-IPInt64 { \n \n    [CmdletBinding()]\n    Param(\n      [parameter(Mandatory=$true)]\n      [string]$IP\n      )\n \n    $IPSPLIT = $IP.Split('.') # IP to it's octets \n \n    # Return \n    [int64]([int64]$IPSPLIT[0] * 16777216 + \n            [int64]$IPSPLIT[1] * 65536 + \n            [int64]$IPSPLIT[2] * 256 + \n            [int64]$IPSPLIT[3]) \n} \n \nFunction Convert-SMtoCIDR\n{ \n\n   [CmdletBinding()]\n    Param(\n      [parameter(Mandatory=$true)]\n      [string]$SUBNET_MASK\n      )\n \n    [int64]$SMINT64 = Convert-IPInt64 -IP $SUBNET_MASK \n \n    $Cidr32Int = 2147483648 \n \n    $MaskCidr = 0 \n    for ($i = 0; $i -lt 32; $i++) \n    { \n        if (!($SMINT64 -band $Cidr32Int) -eq $Cidr32Int) { break } # Bitwise and operator - Same as \"&\" in C# \n \n        $MaskCidr++ \n        $Cidr32Int = $Cidr32Int -shr 1 \n    } \n \n    # Return \n    $MaskCidr \n}\n#endregion\n\n# using the switch block to create a powershell object to hold the values.\nswitch ($network)\n{\n    $def_net1\n    {\n        $mask = $def_net1_mask\n        $gateway = $def_net1_gw\n    }\n    $def_net2\n    {\n        $mask = $def_net2_mask\n        $gateway = $def_net2_gw\n    }\n}\n\nWrite-Host \"Network is: $network\"\nWrite-Host \"Subnet mask is: $($mask)\"\nWrite-Host \"Default gateway is: $($gateway)\"\n# create connection to the solarwinds ipam server\n$swis = Connect-Swis -Hostname $swhost -UserName $swuser -Password $swpasswd\n\n# using the subnet mask to generate the cidr.  cidr Code contributed by Matthew.Foster@nutanix.com\n$cidr = Convert-SMtoCIDR -SUBNET_MASK $mask\n\n# DNS & Ping Test to double check the reservation.  This may or maynot be needed depending on\n# how well the customer is leveraging their IPAM solution.\n$Test = $true\nwhile ($test -eq $true)\n{\n    # do some checks (ping and nslookup) to make sure that the IPs are truly available\n    # get an IP from the IPAM\n    $ip_address = Invoke-SwisVerb $swis IPAM.SubnetManagement StartIpReservation @(\"$network\", \"$cidr\", \"$reservetime\") -Verbose | \n      Select-Object -expand '#text'\n    \n      # test-netconnection is really just a ping to the IP we received from the IPAM.\n    $Test = Test-NetConnection -InformationLevel Quiet $ip_address -ErrorAction Continue\n    \n    # if the ping 'fails', the ip is not in use.  next step we need to check dns...\n    if ($test -eq $false)\n    {\n        try\n        {\n            # now let's check DNS with resolve-dns.  if this command errors, drop to catch block.\n            # if it resolves successfully, let's reset the $test variable back to true \n            # and try again.\n            Resolve-DnsName -Name $ip_address\n            $Test = $true\n        }\n        catch\n        {\n            $test = $false\n            # we need to clear the error from the resolve-dnsname command so that calm\n            # will not fail due to the error.\n            $error.Clear()\n        }\n    }\n}\n\ntry\n{\n    # we are putting this in a try catch - just because....  The current version of the API does not appear to throw error messages.\n    $capture_ipam1 = Invoke-SwisVerb -SwisConnection $swis -EntityName IPAM.SubnetManagement -Verb ChangeIpStatus @($ip_address, \"Blocked\") -Verbose\n    $capture_ipam2 = Invoke-SwisVerb -SwisConnection $swis -EntityName IPAM.SubnetManagement -Verb FinishIpReservation @($ip_address, \"Reserved\") -Verbose     \n}\ncatch\n{\n    #displaying error\n    $_ \n}\n\nWrite-Host \"vm_ip=$ip_address\"\nWrite-Host \"subnet_mask=$mask\"\nWrite-Host \"gateway=$gateway\"\nWrite-Host \"subnet_mask_bits=$cidr\"","eval_variables":["vm_ip","subnet_mask","subnet_mask_bits","gateway","cidr"],"eval_scope":"local","type":"","script_type":"npsscript"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"vSphereVM___pre_create___runbook","main_task_local_reference":{"kind":"app_task","name":"vSphereVM___pre_create___dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"vSphereVM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"SolarWindsRemoveIp"}],"name":"vSphereVM___post_delete___dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"vSphereVM"},"retries":"0","description":"","exec_target_reference":{"kind":"app_endpoint","name":"solarwinds"},"child_tasks_local_reference_list":[],"name":"SolarWindsRemoveIp","attrs":{"script":" #requires -version 4 -Module SwisPowerShell\n \n<#\n    .SYNOPSIS\n        Code sample for Solarwinds IPAM to remove reservation\n    .DESCRIPTION\n        requires solarwinds module - https:\/\/www.powershellgallery.com\/packages\/SwisPowerShell\n        the solarwinds rest api is not well documented, so the best solution\n        is to use the powershell commandlets and execute them from the\n        IPAM server.\n\n        Note - An active directory account can not be used with the solarwinds API\n        It must be a solarwinds 'sql' account.\n\n        In Calm, this task should be executed against a Windows Endpoint (possibly the SWIS host)\n\n    .NOTES\n        Version:        1.0\n        Author:         Dusty Lane\n        Creation Date:  05\/10\/2021\n        Purpose\/Change: \n  \n#>\n\n$ip_address = \"@@{vm_ip}@@\"\n$swhost = \"@@{solarwinds_ip}@@\"\n$swuser = \"@@{solarwinds.username}@@\"\n$swpasswd = \"@@{solarwinds.secret}@@\"\n\n#------------------ no changes below here -----------#\ntry \n{\n    $swis = Connect-Swis -Hostname $swhost -username $swuser -Password $swpasswd\n    invoke-swisverb $swis IPAM.SubnetManagement ChangeIpStatus @($ip_address, \"Available\")\n}\ncatch \n{\n    #displaying error\n    $_\n}\n","type":"","command_line_args":"","exit_status":[],"script_type":"npsscript"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"vSphereVM___post_delete___runbook","main_task_local_reference":{"kind":"app_task","name":"vSphereVM___post_delete___dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"VMWARE_VM","name":"vSphereVM","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{platform.ipAddressList[0]}@@","delay_secs":"300","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"editables":{"create_spec":{"folder":{},"resources":{"template_nic_list":{"0":{"net_name":true}},"num_vcpus_per_socket":true,"num_sockets":true,"controller_list":{},"memory_size_mib":true,"guest_customization":{"windows_data":{"timezone":true}},"disk_list":{"0":{"disk_size_mb":true}}}}},"os_type":"Windows","create_spec":{"compute_drs_mode":true,"name":"@@{vm_name}@@","type":"PROVISION_VMWARE_VM","drs_mode":true,"cluster":"ROCKET","host":"","resources":{"nic_list":[],"template_disk_list":[{"disk_size_mb":61440,"is_deleted":false,"disk_mode":"persistent","device_slot":0,"adapter_type":"SCSI","iso_path":"","location":"ds:\/\/\/vmfs\/volumes\/be77b032-1ec18851\/","key":2000,"controller_key":1000,"disk_type":"disk","type":""},{"disk_size_mb":-1,"is_deleted":false,"disk_mode":"persistent","device_slot":0,"adapter_type":"IDE","iso_path":"","location":"","key":3000,"controller_key":200,"disk_type":"cdrom","type":""}],"template_nic_list":[{"nic_type":"vmxnet3","is_deleted":false,"net_name":"key-vim.host.PortGroup-568","key":4000,"type":""}],"num_sockets":1,"num_vcpus_per_socket":1,"memory_hot_plug":false,"template_controller_list":[{"controller_type":"VirtualLsiLogicSASController","type":"","bus_sharing":"noSharing","is_deleted":false,"key":1000}],"controller_list":[{"controller_type":"ParaVirtualSCSIController","type":"","bus_sharing":"noSharing","key":1001}],"memory_size_mib":2048,"power_state":"poweron","cpu_hot_add":false,"guest_customization":{"type":"","cloud_init":"","customization_type":"GUEST_OS_WINDOWS","windows_data":{"dns_primary":"@@{dns1}@@","is_domain":false,"password":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"type":"","product_id":"@@{product_key}@@","command_list":["net user administrator @@{windows.secret}@@","logoff"],"dns_search_path":[],"auto_logon":true,"login_count":1,"domain":"","full_name":"@@{vm_requester_name}@@","organization_name":"@@{org}@@","domain_password":null,"computer_name":"@@{vm_name}@@","timezone":"105","domain_user":"","dns_tertiary":"","dns_secondary":"@@{dns2}@@","network_settings":[{"is_dhcp":false,"gateway_default":"@@{gateway}@@","name":"","ip":"@@{vm_ip}@@","subnet_mask":"@@{subnet_mask}@@","type":"","gateway_alternate":""}],"workgroup":"WORKGROUP"},"customization_name":""},"tag_list":[{"type":"","tag_id":"urn:vmomi:InventoryServiceTag:3b455b63-7927-4336-8186-d4e0bf2d976f:GLOBAL"}],"type":"","account_uuid":"fd98c355-7f48-49a1-c802-339a702a4292","disk_list":[{"disk_size_mb":51200,"disk_mode":"persistent","device_slot":0,"adapter_type":"SCSI","iso_path":"","location":"","controller_key":1001,"disk_type":"disk","type":""}]},"template":"503c5d4c-cd32-5e27-f54f-3cde7892d191","datastore":"","storage_drs_mode":true,"storage_pod":"RocketStorage","folder":{"type":"","existing_path":"pracdev-cita","new_path":"","delete_empty_folder":false},"clone_is_template":false},"variable_list":[]}],"credential_definition_list":[{"username":"administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"windows","editables":{"username":false,"secret":true}},{"username":"sbourdeaud@gso.lab","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"active_directory"},{"username":"sbourdeaud@gso.lab","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"prism_central"},{"username":"sbourdeaud@gso.lab","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"vcenter"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"solarwinds"}],"package_definition_list":[{"description":"","action_list":[],"type":"CUSTOM","service_local_reference_list":[{"kind":"app_service","name":"Windows"}],"name":"AHV_Package","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"PcMountNgt"},{"kind":"app_task","name":"Wait20"},{"kind":"app_task","name":"InstallNgt"},{"kind":"app_task","name":"PcEnableNewNgt"}],"name":"AHV_Package___install___dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"PcMountNgt"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait20"}},{"from_task_reference":{"kind":"app_task","name":"Wait20"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"InstallNgt"}},{"from_task_reference":{"kind":"app_task","name":"InstallNgt"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"PcEnableNewNgt"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"PcMountNgt","attrs":{"script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcMountNgt\n# description:    This script mounts the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm.\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{prism_central.username}@@\"\npc_password = \"@@{prism_central.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{prism_central_ip}@@\"\n# endregion\n\n# region prepare variables\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\nimport requests\n\ndef process_request(url, method, user, password, headers, payload=None, secure=False):\n    if payload is not None:\n        payload = json.dumps(payload)\n    \n    #configuring web request behavior\n    timeout=10\n    retries = 5\n    sleep_between_retries = 5\n    \n    while retries > 0:\n        try:\n\n            if method == 'POST':\n                    r = requests.post(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'DELETE':\n                r = requests.delete(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'GET':\n                r = requests.get(\n                    url,\n                    headers=headers,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'PUT':\n                    r = requests.put(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'PATCH':\n                    r = requests.patch(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n        except requests.exceptions.HTTPError as e:\n            print (\"Http Error!\")\n            print(\"status code: {}\".format(r.status_code))\n            print(\"reason: {}\".format(r.reason))\n            print(\"text: {}\".format(r.text))\n            print(\"elapsed: {}\".format(r.elapsed))\n            print(\"headers: {}\".format(r.headers))\n            if payload is not None:\n                print(\"payload: {}\".format(payload))\n            print(json.dumps(\n                json.loads(r.content),\n                indent=4\n            ))\n            exit(r.status_code)\n        except requests.exceptions.ConnectionError as e:\n            print (\"Connection Error!\")\n            if retries == 1:\n                print('Error: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n                exit(1)\n            else:\n                print('Error: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n                sleep(sleep_between_retries)\n                retries -= 1\n                print (\"retries left: {}\".format(retries))\n                continue\n            print('Error: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n            exit(1)\n        except requests.exceptions.Timeout as e:\n            print (\"Timeout Error!\")\n            if retries == 1:\n                raise Exception(e)\n            else:\n                print('Error! Code: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n                sleep(sleep_between_retries)\n                retries -= 1\n                print (\"retries left: {}\".format(retries))\n                continue\n        except requests.exceptions.RequestException as e:\n            print (\"Error!\")\n            exit(r.status_code)\n        break\n    \n    if r.ok:\n        return r\n    if r.status_code == 401:\n        print(\"status code: {0}\".format(r.status_code))\n        print(\"reason: {0}\".format(r.reason))\n        exit(r.status_code)\n    elif r.status_code == 500:\n        print(\"status code: {0}\".format(r.status_code))\n        print(\"reason: {0}\".format(r.reason))\n        print(\"text: {0}\".format(r.text))\n        exit(r.status_code)\n    else:\n        print(\"Request failed!\")\n        print(\"status code: {0}\".format(r.status_code))\n        print(\"reason: {0}\".format(r.reason))\n        print(\"text: {0}\".format(r.text))\n        print(\"raise_for_status: {0}\".format(r.raise_for_status()))\n        print(\"elapsed: {0}\".format(r.elapsed))\n        print(\"headers: {0}\".format(r.headers))\n        if payload is not None:\n            print(\"payload: {0}\".format(payload))\n        print(json.dumps(\n            json.loads(r.content),\n            indent=4\n        ))\n        exit(r.status_code)\n        \n# endregion\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Retrieving cluster IP address...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\n\nif resp.ok:\n    result = json.loads(resp.content)\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed!\")\n    print(\"status code: {}\".format(r.status_code))\n    print(\"reason: {}\".format(r.reason))\n    print(\"text: {}\".format(r.text))\n    print(\"raise_for_status: {}\".format(r.raise_for_status()))\n    print(\"elapsed: {}\".format(r.elapsed))\n    print(\"headers: {}\".format(r.headers))\n    print(\"payload: {}\".format(payload))\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    exit(1)\n# endregion\n\n# region mount the NGT image (to regenerate the certificates)\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}\/guest_tools\/mount\".format(\n    cluster_ip,\n    vm_uuid\n)\nprint(\"Mounting NGT...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\nresult = json.loads(resp.content)\n\nif resp.ok:\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT mounted\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed!\")\n    print(\"status code: {}\".format(r.status_code))\n    print(\"reason: {}\".format(r.reason))\n    print(\"text: {}\".format(r.text))\n    print(\"raise_for_status: {}\".format(r.raise_for_status()))\n    print(\"elapsed: {}\".format(r.elapsed))\n    print(\"headers: {}\".format(r.headers))\n    print(\"payload: {}\".format(payload))\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    exit(1)\n# endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Wait20","attrs":{"type":"","interval_secs":20},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"InstallNgt","attrs":{"exit_status":[],"script":"<#\n.notes\n##############################################################################\n#          Nutanix Guest Tools Active Directory Installer Script\n#          Filename            :      NTNX_NGT_Startup_Installer.ps1\n#          Script Version      :      1.0.5\n#          Author              :      Ed McAndrew (ed.mcandrew@nutanix.com)\n##############################################################################\n.prerequisites\n    1. Powershell 4 or above ($psversiontable.psversion.major)\n    2. Windows Vista or newer.\n    3. There is a shared key exchange between the ISO\/Mount process and the Nutanix Guest Tools installation process.\n            a) For Nutanix Guest Tools to work properly, you MUST mount the Nutanix Guest Tools ISO to the virtual machine prior to this startup script execution.\n            b) To do this, either use Prism to mount the NGT ISO, or from SSH to one of your Controller Virtual Machines (CVMs), run the following.\n                $ ncli ngt mount vm-id=<vm_id>\n                note: To get the <vm_id>, you can use the following command\n                            $ ncli vm list | grep -B2 <part of your vm name>\n                            Example; Our <vm_id> will be: 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                $ ncli vm list | grep -B2 emcandrew\n                                Id                        : 00056eb6-a64f-650a-0000-00000000a8bb::11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Uuid                      : 11f155b3-b003-4046-bac9-1b9f4cce7119\n                                Name                      : emcandrew-win10\n                note: You can also do a mass mounting of the Nutanix Guest Tools (WARNING: THIS WILL MOUNT THE NGT ISO ON ALL VIRTUAL MACHINES):\n                            To Mount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt mount vm-id=$i;done\n                            To Unmount:\n                                $ for i in `ncli vm list | grep \"Id\" | grep -v Hypervisor | awk -F \":\" '{print $4}'`;do ncli ngt unmount vm-id=$i;done\n                note: You can also build a master list of virtual machines, edit that list and then mount the NGT ISO based on the edited list.\n                            To build the list:\n                                $ ncli vm list | egrep 'Id|Name' | grep -v \"Hypervisor\" | awk '{$1=$2=\"\"; print $0}' | paste -sd ' \\n' > ~\/ngt_iso_mount.txt\n                            Once done editing with VIM (vi), save the file and run the following one-liner.  This one will parse each line of the file and mount the NGT ISO to each VM.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nMounting NGT: $a\"; ncli ngt mount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n                            The installation package will eject the ISO when it completes.  But if you need to manually unmount the ISO, you can use this same process but unmount instead.\n                                $ while IFS=\" ,\" read b a; do echo -e \"========\\nUnmounting NGT: $a\"; ncli ngt unmount vm-id=$(echo $b | awk -F \"::\" '{print $2}'); done < ~\/ngt_iso_mount.txt\n.synopsis\n    Determine if Nutanix Guest Tools (NGT) is installed.  If not installed, determine mount path for NGT ISO and install from that.  Basic state information written to Application Event log under eventid 1.\n.usage\n    Run this script from an Active Directory startup script GPO\n.author\n    Ed McAndrew (ed.mcandrew@nutanix.com)\n.disclaimer\n    This script is provided \"AS IS\" without any additional support of any kind.\n    This script is provided \"AS IS\" without warranty of any kind, either expressed or implied, including but not limited to the implied warranties of merchantability and\/or fitness for a particular purpose.\n#>\n##############################################################################\n# SET VARIABLES\n##############################################################################\n$my_log_directory = \"c:\\\"\n##############################################################################\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n# CHANGE NOTHING BELOW HERE!\n#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n[string]$my_temperract = $erroractionpreference # set error handling preferences\n[string]$erroractionpreference = \"silentlycontinue\" # set error handling preferences\n$ntnx_cnt = 0\n\nfunction write-log {\n    [cmdletbinding()]\n    param(\n        [parameter(valuefrompipeline=$true,mandatory=$true)] [validatenotnullorempty()]\n        [string] $message,\n        [parameter()] [validateset(\"Error\", \"Warn\", \"Info\")]\n        [string] $level = \"Info\"\n    )\n    $eventid = 1\n    $eventlogname = \"Application\"\n    $eventsource = \"Nutanix Guest Tools Installer Script\"\n    if (-not [diagnostics.eventlog]::sourceexists($eventsource)) { [diagnostics.eventlog]::createeventsource($eventsource, $eventlogname) }\n    $log = new-object system.diagnostics.eventlog\n    $log.set_log($eventlogname)\n    $log.set_source($eventsource)\n    switch ($level) {\n        \"error\" { $log.writeentry($message, 'Error', $eventid) }\n        \"warn\"  { $log.writeentry($message, 'Warning', $eventid) }\n        \"info\"  { $log.writeentry($message, 'Information', $eventid) }\n    }\n}\n\nget-wmiobject -class win32_product | % { if ($_.Name -match \"nutanix\") { $ntnx_cnt++ } }\nif ($ntnx_cnt -ne 6) {\n    $my_driveid = (get-ciminstance Win32_LogicalDisk | ?{ $_.volumename -eq \"NUTANIX_TOOLS\" }).deviceid\n    $my_date = get-date -format 'MMddyyyy_HHmm'\n    $my_files = @(\"Nutanix_Guest_Tools*\")\n    if ($my_driveid) {\n        try {\n            if (test-path \"$($my_driveid)\\setup.exe\") {\n                write-log -message \"Starting Nutanix Guest Tools Installer...\" -level info\n                write-host \"Starting Nutanix Guest Tools Installer...\"\n                $process = start-process \"$($my_driveid)\\setup.exe\" -windowstyle Hidden -argumentlist \"\/quiet \/norestart ACCEPTEULA=YES IGNOREALLWARNINGS=yes log $($my_log_directory)\\NGT\\\" -passthru -wait\n                if ($process.exitcode -eq 0) {\n                    write-log -message \"Installation Succeeded...\" -level info\n                    write-host \"Installation Succeeded...\"\n                }\n                else {\n                    write-log -message \"Installation failed, non-zero exit code...\" -level warn\n                    write-host \"Installation failed, non-zero exit code...\"\n                }\n            }\n            else {\n                    write-log -message \"Installation failed, setup executable not found...\" -level warn\n                    wrtie-host \"Installation failed, setup executable not found...\"\n            }\n        }\n        catch {\n            write-log -message \"Installation failed...`r`n$($_)\" -level error\n            write-host \"Installation failed...`r`n$($_)\"\n        }\n        new-item -itemtype directory -force -path \"$($my_log_directory)\\NGT\" | out-null; get-childitem -recurse ($env:temp) -include ($my_files) | move-item -destination \"$($my_log_directory)\\NGT\\\" -ea silentlycontinue\n    }\n    else {\n        write-log -message \"Installation failed, ISO not mounted...\" -level warn\n        write-host \"Installation failed, ISO not mounted...\"\n    }\n}\nelse {\n    write-log -message \"Nutanix Guest Tools is already installed...\" -level info\n    write-host \"Nutanix Guest Tools is already installed...\"\n}\n$erroractionpreference = $my_temperract\nexit\n########","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"windows"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"PcEnableNewNgt","attrs":{"script":"# region headers\n# escript-template v20190523 \/ stephane.bourdeaud@nutanix.com\n# * author:       salaheddine.gassim@nutanix.com, stephane.bourdeaud@nutanix.com\n# * version:      2019\/06\/04\n# task_name:      PcEnableNewNgt\n# description:    This script enables the Nutanix Guest Tools on the AHV\n#                 virtual machine provisioned by Calm. It assumes NGT has been\n#                 installed after the VM was deployed (as opposed to being\n#                 pre-installed in the VM template).\n# endregion\n\n# region capture Calm macros\npc_user = \"@@{prism_central.username}@@\"\npc_password = \"@@{prism_central.secret}@@\"\nvm_uuid = \"@@{platform.metadata.uuid}@@\"\ncluster_uuid = \"@@{platform.status.cluster_reference.uuid}@@\"\npc_ip = \"@@{prism_central_ip}@@\"\n# endregion\n\n# region prepare variables\nvm_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/vms\/{}\".format(\n    pc_ip,\n    vm_uuid\n)\ncluster_uuid_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/clusters\/{}\".format(\n    pc_ip,\n    cluster_uuid\n)\nheaders = {\n    'Accept': 'application\/json',\n    'Content-Type': 'application\/json; charset=UTF-8'\n}\n# endregion\n\n\n# region functions\nimport requests\n\ndef process_request(url, method, user, password, headers, payload=None, secure=False):\n    if payload is not None:\n        payload = json.dumps(payload)\n    \n    #configuring web request behavior\n    timeout=10\n    retries = 5\n    sleep_between_retries = 5\n    \n    while retries > 0:\n        try:\n\n            if method == 'POST':\n                    r = requests.post(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'DELETE':\n                r = requests.delete(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'GET':\n                r = requests.get(\n                    url,\n                    headers=headers,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'PUT':\n                    r = requests.put(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n            elif method == 'PATCH':\n                    r = requests.patch(\n                    url,\n                    headers=headers,\n                    data=payload,\n                    auth=(user, password),\n                    verify=secure,\n                    timeout=timeout\n                )\n        except requests.exceptions.HTTPError as e:\n            print (\"Http Error!\")\n            print(\"status code: {}\".format(r.status_code))\n            print(\"reason: {}\".format(r.reason))\n            print(\"text: {}\".format(r.text))\n            print(\"elapsed: {}\".format(r.elapsed))\n            print(\"headers: {}\".format(r.headers))\n            if payload is not None:\n                print(\"payload: {}\".format(payload))\n            print(json.dumps(\n                json.loads(r.content),\n                indent=4\n            ))\n            exit(r.status_code)\n        except requests.exceptions.ConnectionError as e:\n            print (\"Connection Error!\")\n            if retries == 1:\n                print('Error: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n                exit(1)\n            else:\n                print('Error: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n                sleep(sleep_between_retries)\n                retries -= 1\n                print (\"retries left: {}\".format(retries))\n                continue\n            print('Error: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n            exit(1)\n        except requests.exceptions.Timeout as e:\n            print (\"Timeout Error!\")\n            if retries == 1:\n                raise Exception(e)\n            else:\n                print('Error! Code: {c}, Message: {m}'.format(c = type(e).__name__, m = str(e)))\n                sleep(sleep_between_retries)\n                retries -= 1\n                print (\"retries left: {}\".format(retries))\n                continue\n        except requests.exceptions.RequestException as e:\n            print (\"Error!\")\n            exit(r.status_code)\n        break\n    \n    if r.ok:\n        return r\n    if r.status_code == 401:\n        print(\"status code: {0}\".format(r.status_code))\n        print(\"reason: {0}\".format(r.reason))\n        exit(r.status_code)\n    elif r.status_code == 500:\n        print(\"status code: {0}\".format(r.status_code))\n        print(\"reason: {0}\".format(r.reason))\n        print(\"text: {0}\".format(r.text))\n        exit(r.status_code)\n    else:\n        print(\"Request failed!\")\n        print(\"status code: {0}\".format(r.status_code))\n        print(\"reason: {0}\".format(r.reason))\n        print(\"text: {0}\".format(r.text))\n        print(\"raise_for_status: {0}\".format(r.raise_for_status()))\n        print(\"elapsed: {0}\".format(r.elapsed))\n        print(\"headers: {0}\".format(r.headers))\n        if payload is not None:\n            print(\"payload: {0}\".format(payload))\n        print(json.dumps(\n            json.loads(r.content),\n            indent=4\n        ))\n        exit(r.status_code)\n        \n# endregion\n\n# region get the AHV cluster IP address\nmethod = 'GET'\nurl = cluster_uuid_url\nprint(\"Retrieving cluster IP address...\")\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = process_request(url, method, pc_user, pc_password, headers)\n\nif resp.ok:\n    result = json.loads(resp.content)\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    cluster_ip = result[\"status\"][\"resources\"][\"network\"][\"external_ip\"]\n    print(\"The AHV cluster IP address is {}\".format(cluster_ip))\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed!\")\n    print(\"status code: {}\".format(r.status_code))\n    print(\"reason: {}\".format(r.reason))\n    print(\"text: {}\".format(r.text))\n    print(\"raise_for_status: {}\".format(r.raise_for_status()))\n    print(\"elapsed: {}\".format(r.elapsed))\n    print(\"headers: {}\".format(r.headers))\n    print(\"payload: {}\".format(payload))\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    exit(1)\n# endregion\n\n# region enable guest tools for the VM\nmethod = 'POST'\nurl = \"https:\/\/{}:9440\/PrismGateway\/services\/rest\/v1\/vms\/{}::{}\/guest_tools\".format(\n    cluster_ip,\n    cluster_uuid,\n    vm_uuid\n)\nprint(\"Enabling NGT...\")\nprint(\"Making a {} API call to {}\".format(method, url))\npayload = {\n    \"vmUuid\": cluster_uuid + \"::\" + vm_uuid,\n    \"enabled\": \"true\",\n    \"applications\": {\n        \"file_level_restore\": \"false\",\n        \"vss_snapshot\": \"true\"\n    }\n}\nresp = process_request(url, method, pc_user, pc_password, headers, payload)\n\nif resp.ok:\n    result = json.loads(resp.content)\n    # print the content of the response\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"NGT enabled\")\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed!\")\n    print(\"status code: {}\".format(r.status_code))\n    print(\"reason: {}\".format(r.reason))\n    print(\"text: {}\".format(r.text))\n    print(\"raise_for_status: {}\".format(r.raise_for_status()))\n    print(\"elapsed: {}\".format(r.elapsed))\n    print(\"headers: {}\".format(r.headers))\n    print(\"payload: {}\".format(payload))\n    print(json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    exit(1)\n# endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"AHV_Package___install___runbook","main_task_local_reference":{"kind":"app_task","name":"AHV_Package___install___dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DAG_Task_for_Package_AHV_Package_action_uninstall","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Runbook_for_Package_AHV_Package_action_uninstall","main_task_local_reference":{"kind":"app_task","name":"DAG_Task_for_Package_AHV_Package_action_uninstall"},"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"CUSTOM","service_local_reference_list":[{"kind":"app_service","name":"Windows"}],"name":"vSphere_Package","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DAG_Task_for_Package_vSphere_Package_action_install","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Runbook_for_Package_vSphere_Package_action_install","main_task_local_reference":{"kind":"app_task","name":"DAG_Task_for_Package_vSphere_Package_action_install"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Windows"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"DAG_Task_for_Package_vSphere_Package_action_uninstall","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"Runbook_for_Package_vSphere_Package_action_uninstall","main_task_local_reference":{"kind":"app_task","name":"DAG_Task_for_Package_vSphere_Package_action_uninstall"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"6ca90e2b_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"AHV_Package"}],"substrate_local_reference":{"kind":"app_substrate","name":"AHVVM"},"options":{"type":""},"variable_list":[],"description":""}],"environment_reference_list":[],"description":"","action_list":[],"name":"AHV","variable_list":[{"regex":{"should_validate":true,"value":"^\\s*(?:\\S\\s*){3,15}$"},"val_type":"STRING","is_mandatory":true,"description":"Enter the hostname to give to this Windows virtual machine (max 15 characters). This will also be the VM name in the hypervisor.","data_type":"BASE","type":"LOCAL","name":"vm_name","value":"cita-w1","label":"Hostname","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"Fully qualified domain name of the Active Directory domain to join.","data_type":"BASE","type":"LOCAL","name":"domain","value":"gso.lab","label":"Active Directory domain name (fqdn)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"regex":{"should_validate":false,"value":" "},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"email_sender","value":"stephane.bourdeaud@nutanix.com","label":"","attrs":{"type":""},"is_hidden":true},{"val_type":"STRING","is_mandatory":true,"description":"This is used in the email notification and will also be part of the application instance definition for future references.","data_type":"BASE","type":"LOCAL","name":"vm_requester_name","value":"Stephane Bourdeaud","label":"Your full name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"This will be used to send you a notification with the provisioned VM details, including credentials.","data_type":"BASE","type":"LOCAL","name":"requester_email","value":"stephane.bourdeaud@nutanix.com","label":"Your email address","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"smtp_server","value":"10.40.64.35","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":true,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"prism_central_ip","value":"127.0.0.1","label":"","attrs":{"type":""},"is_hidden":true},{"val_type":"STRING","is_mandatory":true,"description":"Select the locale to apply to Windows which will determine the language and keyboard layout.","data_type":"BASE","type":"LOCAL","name":"locale","value":"en-US","label":"Locale","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["en-US","en-GB","fr-FR"]}},{"val_type":"STRING","is_mandatory":true,"description":"Select the timezone to apply in Windows.","data_type":"BASE","type":"LOCAL","name":"timezone","value":"UTC","label":"TimeZone","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["UTC","Europe\/Paris"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"org","value":"Nutanix","label":"","attrs":{"type":""},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"product_key","value":"N2G46-YYJY2-JQXBB-TBB4M-2PR8F","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"solarwinds_ip","value":"10.48.108.4","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Solarwinds managed subnet from which to get an IPv4 address.","data_type":"BASE","type":"LOCAL","name":"network","value":"10.48.108.0","label":"","attrs":{"type":""},"is_hidden":false},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Name of Solarwinds managed subnet 1 in cidr notation.","data_type":"BASE","type":"LOCAL","name":"def_net1","value":"10.48.108.0","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Gateway for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net1_gw","value":"10.48.108.1","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Subnet mask for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net1_mask","value":"255.255.252.0","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"Name of Solarwinds managed subnet 1 in cidr notation.","data_type":"BASE","type":"LOCAL","name":"def_net2","value":"","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"Gateway for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net2_gw","value":"","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"Subnet mask for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net2_mask","value":"","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":true,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":true,"description":"Please enter the IPv4 address of the primary DNS server","data_type":"BASE","type":"LOCAL","name":"dns1","value":"10.48.108.10","label":"","attrs":{"type":""},"is_hidden":false},{"regex":{"should_validate":true,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":true,"description":"Please enter the IPv4 address of the secondary DNS server","data_type":"BASE","type":"LOCAL","name":"dns2","value":"10.48.104.10","label":"","attrs":{"type":""},"is_hidden":false}]},{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"04e86344_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"vSphere_Package"}],"substrate_local_reference":{"kind":"app_substrate","name":"vSphereVM"},"options":{"type":""},"variable_list":[],"description":""}],"environment_reference_list":[],"description":"","action_list":[],"name":"vSphere","variable_list":[{"regex":{"should_validate":true,"value":"^\\s*(?:\\S\\s*){3,15}$"},"val_type":"STRING","is_mandatory":true,"description":"Enter the hostname to give to this Windows virtual machine (max 15 characters). This will also be the VM name in the hypervisor.","data_type":"BASE","type":"LOCAL","name":"vm_name","value":"cita-w1","label":"Hostname","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":true,"description":"Fully qualified domain name of the Active Directory domain to join.","data_type":"BASE","type":"LOCAL","name":"domain","value":"gso.lab","label":"Active Directory domain name (fqdn)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"regex":{"should_validate":false,"value":" "},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"email_sender","value":"stephane.bourdeaud@nutanix.com","label":"","attrs":{"type":""},"is_hidden":true},{"val_type":"STRING","is_mandatory":true,"description":"This is used in the email notification and will also be part of the application instance definition for future references.","data_type":"BASE","type":"LOCAL","name":"vm_requester_name","value":"Stephane Bourdeaud","label":"Your full name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"regex":{"should_validate":false,"value":" "},"val_type":"STRING","is_mandatory":true,"description":"This will be used to send you a notification with the provisioned VM details, including credentials.","data_type":"BASE","type":"LOCAL","name":"requester_email","value":"stephane.bourdeaud@nutanix.com","label":"Your email address","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"smtp_server","value":"10.40.64.35","label":"","attrs":{"type":""},"is_hidden":true},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"org","value":"Nutanix","label":"","attrs":{"type":""},"is_hidden":false},{"regex":{"should_validate":true,"value":"^\\s*(?:\\S\\s*){3,29}$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"product_key","value":"N2G46-YYJY2-JQXBB-TBB4M-2PR8F","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"solarwinds_ip","value":"10.48.108.4","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Solarwinds managed subnet from which to get an IPv4 address.","data_type":"BASE","type":"LOCAL","name":"network","value":"10.48.108.0","label":"","attrs":{"type":""},"is_hidden":false},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Name of Solarwinds managed subnet 1 in cidr notation.","data_type":"BASE","type":"LOCAL","name":"def_net1","value":"10.48.108.0","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Gateway for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net1_gw","value":"10.48.108.1","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":true,"description":"Subnet mask for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net1_mask","value":"255.255.252.0","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"Name of Solarwinds managed subnet 1 in cidr notation.","data_type":"BASE","type":"LOCAL","name":"def_net2","value":"","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"Gateway for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net2_gw","value":"","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":false,"value":""},"val_type":"STRING","is_mandatory":false,"description":"Subnet mask for Solarwinds managed subnet 1.","data_type":"BASE","type":"LOCAL","name":"def_net2_mask","value":"","label":"","attrs":{"type":""},"is_hidden":true},{"regex":{"should_validate":true,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":true,"description":"Please enter the IPv4 address of the primary DNS server","data_type":"BASE","type":"LOCAL","name":"dns1","value":"10.48.108.10","label":"","attrs":{"type":""},"is_hidden":false},{"regex":{"should_validate":true,"value":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"},"val_type":"STRING","is_mandatory":true,"description":"Please enter the IPv4 address of the secondary DNS server","data_type":"BASE","type":"LOCAL","name":"dns2","value":"10.48.104.10","label":"","attrs":{"type":""},"is_hidden":false}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"windows"},"type":"USER"},"name":"cita-starter-windows-f5-solarwinds-v2"},"api_version":"3.0","metadata":{"last_update_time":"1622040180933729","kind":"blueprint","spec_version":1,"creation_time":"1622040175020658","name":"cita-starter-windows-f5-solarwinds-v2"}}